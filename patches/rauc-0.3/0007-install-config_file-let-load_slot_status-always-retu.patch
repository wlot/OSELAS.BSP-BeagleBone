From 69a7aa617886b115627e85e111e27e44f872d610 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ulrich=20=C3=96lmann?= <u.oelmann@pengutronix.de>
Date: Thu, 31 Aug 2017 10:30:21 +0200
Subject: [PATCH 07/44] install/config_file: let load_slot_status() always
 return a valid status to simplify install logic
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This allows to get rid of one layer of case differentiation in the install logic
while staying equivalent.

In case of a problem occuring in load_slot_status() instead of explicitely
modifying a GError** argument and returning directly do what the single caller
of the function did before: communicate the problem via g_message().

The impact on read_slot_status() is that it now acts on a pre-allocated data
structure and therefore has to free old memory before assigning newly allocated
components.

Signed-off-by: Ulrich Ã–lmann <u.oelmann@pengutronix.de>
---
 include/config_file.h | 18 +++++++-------
 src/config_file.c     | 40 ++++++++++++++++++-------------
 src/install.c         | 66 +++++++++++++++++++++++----------------------------
 test/config_file.c    |  7 +++---
 4 files changed, 66 insertions(+), 65 deletions(-)

diff --git a/include/config_file.h b/include/config_file.h
index d5c8512..b10cb44 100644
--- a/include/config_file.h
+++ b/include/config_file.h
@@ -130,15 +130,16 @@ RaucSlot *find_config_slot_by_device(RaucConfig *config, const gchar *device);
 void free_config(RaucConfig *config);
 
 /**
- * Load slot status file.
+ * Load a single slot status from a file into a pre-allocated status structure.
+ * If a problem occurs this structure is left unmodified.
  *
  * @param filename file to load
- * @param slotstatus a location to place the slot status
+ * @param slotstatus pointer to the pre-allocated structure going to store the slot status
  * @param error a GError, or NULL
  *
  * @return TRUE if the slot status was sucessfully loaded. FALSE if there were errors.
  */
-gboolean read_slot_status(const gchar *filename, RaucSlotStatus **slotstatus, GError **error);
+gboolean read_slot_status(const gchar *filename, RaucSlotStatus *slotstatus, GError **error);
 
 /**
  * Save slot status file.
@@ -159,16 +160,15 @@ void free_slot_status(RaucSlotStatus *slotstatus);
 /**
  * Load slot status.
  *
- * This mounts the given slot, reads the status information from its status
- * file and unmounts the slot afterwards.
+ * This mounts the given slot, reads the status information from its status file
+ * and unmounts the slot. If a problem occurs the created slot status consists
+ * of default values. It should be freed with free_slot_status() when no longer
+ * needed.
  *
  * @param dest_slot Slot to load status information for
  * @param slot_state return location for the slot information obtained
- * @param error return location for a GError, or NULL
- *
- * @return TRUE if loading status succeeded, FALSE otherwise
  */
-gboolean load_slot_status(RaucSlot *dest_slot, RaucSlotStatus **slot_state, GError **error);
+void load_slot_status(RaucSlot *dest_slot, RaucSlotStatus **slot_state);
 
 /**
  * Save slot status.
diff --git a/src/config_file.c b/src/config_file.c
index 9aff27b..08d9b5b 100644
--- a/src/config_file.c
+++ b/src/config_file.c
@@ -394,13 +394,16 @@ void free_config(RaucConfig *config) {
 	g_free(config);
 }
 
-gboolean read_slot_status(const gchar *filename, RaucSlotStatus **slotstatus, GError **error) {
+gboolean read_slot_status(const gchar *filename, RaucSlotStatus *slotstatus, GError **error) {
 	GError *ierror = NULL;
-	RaucSlotStatus *ss = g_new0(RaucSlotStatus, 1);
 	gboolean res = FALSE;
 	GKeyFile *key_file = NULL;
 	gchar *digest;
 
+	g_return_val_if_fail(filename, FALSE);
+	g_return_val_if_fail(slotstatus, FALSE);
+	g_return_val_if_fail(error == NULL || *error == NULL, FALSE);
+
 	key_file = g_key_file_new();
 
 	res = g_key_file_load_from_file(key_file, filename, G_KEY_FILE_NONE, &ierror);
@@ -409,21 +412,20 @@ gboolean read_slot_status(const gchar *filename, RaucSlotStatus **slotstatus, GE
 		goto free;
 	}
 
-	ss->status = g_key_file_get_string(key_file, "slot", "status", NULL);
+	g_free(slotstatus->status);
+	g_clear_pointer(&slotstatus->checksum.digest, g_free);
+
+	slotstatus->status = g_key_file_get_string(key_file, "slot", "status", NULL);
 	digest = g_key_file_get_string(key_file, "slot", "sha256", NULL);
 	if (digest) {
-		ss->checksum.type = G_CHECKSUM_SHA256;
-		ss->checksum.digest = digest;
+		slotstatus->checksum.type = G_CHECKSUM_SHA256;
+		slotstatus->checksum.digest = digest;
 	}
 
 	res = TRUE;
 free:
-	if (!res) {
-		free_slot_status(ss);
-		ss = NULL;
-	}
 	g_key_file_free(key_file);
-	*slotstatus = ss;
+
 	return res;
 }
 
@@ -453,38 +455,42 @@ free:
 	return res;
 }
 
-gboolean load_slot_status(RaucSlot *dest_slot, RaucSlotStatus **slot_state, GError **error) {
+void load_slot_status(RaucSlot *dest_slot, RaucSlotStatus **slot_state) {
 	GError *ierror = NULL;
 	gboolean res = FALSE;
 	gchar *slotstatuspath = NULL;
 
+	g_return_if_fail(dest_slot);
+	g_return_if_fail(slot_state != NULL && *slot_state == NULL);
+
+	*slot_state = g_new0(RaucSlotStatus, 1);
+
 	/* read slot status */
 	g_message("mounting slot %s", dest_slot->device);
 	res = r_mount_slot(dest_slot, &ierror);
 	if (!res) {
-		g_propagate_error(error, ierror);
+		g_message("Failed to mount slot %s: %s", dest_slot->device, ierror->message);
 		goto free;
 	}
 
 	slotstatuspath = g_build_filename(dest_slot->mount_point, "slot.raucs", NULL);
 
-	res = read_slot_status(slotstatuspath, slot_state, &ierror);
+	res = read_slot_status(slotstatuspath, *slot_state, &ierror);
 	if (!res) {
+		g_message("Failed to load status file %s: %s", slotstatuspath, ierror->message);
 		r_umount_slot(dest_slot, NULL);
-		g_propagate_error(error, ierror);
 		goto free;
 	}
 
 	res = r_umount_slot(dest_slot, &ierror);
 	if (!res) {
-		g_propagate_error(error, ierror);
+		g_message("Failed to unmount slot %s: %s", dest_slot->device, ierror->message);
 		goto free;
 	}
 
 free:
 	g_clear_pointer(&slotstatuspath, g_free);
-
-	return res;
+	g_clear_error(&ierror);
 }
 
 
diff --git a/src/install.c b/src/install.c
index 83e0097..a5c1636 100644
--- a/src/install.c
+++ b/src/install.c
@@ -870,45 +870,39 @@ static gboolean launch_and_wait_default_handler(RaucInstallArgs *args, gchar* bu
 		if (is_slot_mountable(dest_slot)) {
 			RaucSlotStatus *slot_state = NULL;
 
-			res = load_slot_status(dest_slot, &slot_state, &ierror);
+			load_slot_status(dest_slot, &slot_state);
 
-			if (!res) {
-				g_message("Failed to load slot status file: %s", ierror->message);
-				g_clear_error(&ierror);
+			/* In case we failed unmounting while reading status
+			 * file, abort here */
+			if (dest_slot->mount_point) {
+				res = FALSE;
+				g_set_error(error, R_INSTALL_ERROR, R_INSTALL_ERROR_MOUNTED,
+						"Slot '%s' still mounted", dest_slot->device);
+				r_context_end_step("check_slot", FALSE);
 
-				/* In case we failed unmounting while reading status
-				 * file, abort here */
-				if (dest_slot->mount_point) {
-					res = FALSE;
-					g_set_error(error, R_INSTALL_ERROR, R_INSTALL_ERROR_MOUNTED,
-							"Slot '%s' still mounted", dest_slot->device);
-					r_context_end_step("check_slot", FALSE);
+				g_clear_pointer(&slot_state, free_slot_status);
+				goto out;
+			}
 
-					g_clear_pointer(&slot_state, free_slot_status);
-					goto out;
-				}
+			/* skip if slot is up-to-date */
+			if (!dest_slot->ignore_checksum && g_strcmp0(mfimage->checksum.digest, slot_state->checksum.digest) == 0) {
+				install_args_update(args, g_strdup_printf("Skipping update for correct image %s", mfimage->filename));
+				g_message("Skipping update for correct image %s", mfimage->filename);
+				r_context_end_step("check_slot", TRUE);
+
+				/* Dummy step to indicate slot was skipped */
+				r_context_begin_step("skip_image", "Copying image skipped", 0);
+				r_context_end_step("skip_image", TRUE);
 
 				g_clear_pointer(&slot_state, free_slot_status);
-				slot_state = g_new0(RaucSlotStatus, 1);
-				slot_state->status = g_strdup("update");
-			} else {
-				/* skip if slot is up-to-date */
-				if (!dest_slot->ignore_checksum && g_str_equal(mfimage->checksum.digest, slot_state->checksum.digest)) {
-					install_args_update(args, g_strdup_printf("Skipping update for correct image %s", mfimage->filename));
-					g_message("Skipping update for correct image %s", mfimage->filename);
-					r_context_end_step("check_slot", TRUE);
-
-					/* Dummy step to indicate slot was skipped */
-					r_context_begin_step("skip_image", "Copying image skipped", 0);
-					r_context_end_step("skip_image", TRUE);
-
-					g_clear_pointer(&slot_state, free_slot_status);
-					goto image_out;
-				}
-	
-				g_message("Slot needs to be updated with %s", mfimage->filename);
-				g_clear_pointer(&slot_state, free_slot_status);
+				goto image_out;
 			}
+
+			g_free(slot_state->status);
+			slot_state->status = g_strdup("update");
+
+			g_message("Slot needs to be updated with %s", mfimage->filename);
+			g_clear_pointer(&slot_state, free_slot_status);
 		}
 
 		r_context_end_step("check_slot", TRUE);
@@ -1064,7 +1058,7 @@ static gboolean launch_and_wait_network_handler(const gchar* base_url,
 	// for slot in target_group
 	for (gchar **cls = fileclasses; *cls != NULL; cls++) {
 		gchar *slotstatuspath = NULL;
-		RaucSlotStatus *slot_state = NULL;
+		RaucSlotStatus *slot_state = g_new0(RaucSlotStatus, 1);
 
 		RaucSlot *slot = g_hash_table_lookup(target_group, *cls);
 
@@ -1079,12 +1073,12 @@ static gboolean launch_and_wait_network_handler(const gchar* base_url,
 
 		// read status
 		slotstatuspath = g_build_filename(slot->mount_point, "slot.raucs", NULL);
-		res = read_slot_status(slotstatuspath, &slot_state, &ierror);
+		res = read_slot_status(slotstatuspath, slot_state, &ierror);
 		if (!res) {
 			g_message("Failed to load slot status file: %s", ierror->message);
 			g_clear_error(&ierror);
 
-			slot_state = g_new0(RaucSlotStatus, 1);
+			g_free(slot_state->status);
 			slot_state->status = g_strdup("update");
 		}
 
diff --git a/test/config_file.c b/test/config_file.c
index 9e38782..399f8b6 100644
--- a/test/config_file.c
+++ b/test/config_file.c
@@ -454,8 +454,8 @@ variant-name=";
 
 static void config_file_test_read_slot_status(void)
 {
-	RaucSlotStatus *ss;
-	g_assert_true(read_slot_status("test/rootfs.raucs", &ss, NULL));
+	RaucSlotStatus *ss = g_new0(RaucSlotStatus, 1);
+	g_assert_true(read_slot_status("test/rootfs.raucs", ss, NULL));
 	g_assert_nonnull(ss);
 	g_assert_cmpstr(ss->status, ==, "ok");
 	g_assert_cmpint(ss->checksum.type, ==, G_CHECKSUM_SHA256);
@@ -477,8 +477,9 @@ static void config_file_test_write_slot_status(void)
 	write_slot_status("test/savedslot.raucs", ss, NULL);
 
 	free_slot_status(ss);
+	ss = g_new0(RaucSlotStatus, 1);
 
-	read_slot_status("test/savedslot.raucs", &ss, NULL);
+	read_slot_status("test/savedslot.raucs", ss, NULL);
 
 	g_assert_nonnull(ss);
 	g_assert_cmpstr(ss->status, ==, "ok");
-- 
2.14.1

