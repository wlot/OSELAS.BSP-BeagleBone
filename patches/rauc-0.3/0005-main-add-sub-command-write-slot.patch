From 917bd245844a129a5be43584cf362494705d72bf Mon Sep 17 00:00:00 2001
From: Bastian Stender <bst@pengutronix.de>
Date: Thu, 15 Feb 2018 11:17:34 +0100
Subject: [PATCH 05/44] main: add sub command 'write-slot'

If called with a slot name and image the image is written to the device
corresponding to the slot. This is useful for development purposes and
initial board provisioning.

Signed-off-by: Bastian Stender <bst@pengutronix.de>
---
 src/main.c  | 93 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 test/rauc.t | 13 +++++++++
 2 files changed, 105 insertions(+), 1 deletion(-)

diff --git a/src/main.c b/src/main.c
index 504345b..93e68ac 100644
--- a/src/main.c
+++ b/src/main.c
@@ -17,6 +17,7 @@
 #include "rauc-installer-generated.h"
 #include "service.h"
 #include "signature.h"
+#include "update_handler.h"
 #include "utils.h"
 #include "mark.h"
 
@@ -262,6 +263,93 @@ out:
 	return TRUE;
 }
 
+static gboolean write_slot_start(int argc, char **argv)
+{
+	GError *ierror = NULL;
+	RaucImage *image = g_new0(RaucImage, 1);
+	RaucSlot *slot = g_new0(RaucSlot, 1);
+	GFileInfo *info = NULL;
+	GInputStream *instream = NULL;
+	GFile *imagefile = NULL;
+	img_to_slot_handler update_handler = NULL;
+
+	g_debug("write_slot_start");
+
+	if (argc < 3) {
+		g_printerr("A target slot name must be provided\n");
+		r_exit_status = 1;
+		goto out;
+	}
+
+	if (argc < 4) {
+		g_printerr("An image must be provided\n");
+		r_exit_status = 1;
+		goto out;
+	}
+
+	if (argc > 4) {
+		g_printerr("Excess argument: %s\n", argv[4]);
+		goto out;
+	}
+
+	/* construct RaucImage with required attributes */
+	imagefile = g_file_new_for_path(argv[3]);
+	instream = (GInputStream*)g_file_read(imagefile, NULL, &ierror);
+	if (instream == NULL) {
+		g_printerr("%s\n", ierror->message);
+		g_clear_error(&ierror);
+		r_exit_status = 1;
+		goto out;
+	}
+
+	info = g_file_input_stream_query_info(G_FILE_INPUT_STREAM(instream),
+			G_FILE_ATTRIBUTE_STANDARD_SIZE, NULL, &ierror);
+	if (info == NULL) {
+		g_printerr("%s\n", ierror->message);
+		g_clear_error(&ierror);
+		r_exit_status = 1;
+		goto out;
+	}
+
+	image->checksum.size = g_file_info_get_size(info);
+	image->filename = g_strdup(argv[3]);
+
+	/* retrieve RaucSlot */
+	slot = g_hash_table_lookup(r_context()->config->slots, argv[2]);
+	if (slot == NULL) {
+		g_printerr("No matching slot found for given slot name\n");
+		r_exit_status = 1;
+		goto out;
+	}
+
+	/* retrieve update handler */
+	update_handler = get_update_handler(image, slot, &ierror);
+	if (update_handler == NULL) {
+		g_printerr("%s\n", ierror->message);
+		r_exit_status = 1;
+		goto out;
+	}
+
+	/* call update handler */
+	if (!update_handler(image, slot, NULL, &ierror)) {
+		g_printerr("%s\n", ierror->message);
+		g_clear_error(&ierror);
+		r_exit_status = 1;
+		goto out;
+	}
+
+	g_message("Slot written successfully");
+
+out:
+	g_object_unref(info);
+	g_clear_object(&instream);
+	g_clear_object(&imagefile);
+	g_clear_pointer(&slot, r_free_slot);
+	g_clear_pointer(&image, r_free_image);
+
+	return TRUE;
+}
+
 static gboolean resign_start(int argc, char **argv)
 {
 	RaucBundle *bundle = NULL;
@@ -1109,6 +1197,7 @@ typedef enum  {
 	CHECKSUM,
 	STATUS,
 	INFO,
+	WRITE_SLOT,
 	SERVICE,
 } RaucCommandType;
 
@@ -1176,6 +1265,7 @@ static void cmdline_handler(int argc, char **argv)
 		{CHECKSUM, "checksum", "checksum <DIRECTORY>", "Deprecated", checksum_start, NULL, FALSE},
 		{INFO, "info", "info <FILE>", "Print bundle info", info_start, info_group, FALSE},
 		{STATUS, "status", "status", "Show system status", status_start, status_group, TRUE},
+		{WRITE_SLOT, "write-slot", "write-slot <SLOTNAME> <IMAGE>", "Write image to slot and bypass all update logic", write_slot_start, NULL, FALSE},
 #if ENABLE_SERVICE == 1
 		{SERVICE, "service", "service", "Start RAUC service", service_start, NULL, TRUE},
 #endif
@@ -1200,7 +1290,8 @@ static void cmdline_handler(int argc, char **argv)
 			"  checksum\tUpdate a manifest with checksums (and optionally sign it)\n" \
 			"  install\tInstall a bundle\n" \
 			"  info\t\tShow file information\n" \
-			"  status\tShow status");
+			"  status\tShow status\n" \
+			"  write-slot\tWrite image to slot and bypass all update logic");
 
 	if (!g_option_context_parse(context, &argc, &argv, &error)) {
 		g_printerr("%s\n", error->message);
diff --git a/test/rauc.t b/test/rauc.t
index dd89b1a..fc9fd5e 100755
--- a/test/rauc.t
+++ b/test/rauc.t
@@ -76,6 +76,7 @@ test_expect_success "rauc invalid cmd" "
 
 test_expect_success "rauc missing arg" "
   test_must_fail rauc install &&
+  test_must_fail rauc write-slot &&
   test_must_fail rauc info &&
   test_must_fail rauc bundle &&
   test_must_fail rauc checksum &&
@@ -226,4 +227,16 @@ test_expect_success "rauc install invalid local paths" "
   test_must_fail rauc install /path/to/foo.raucb
 "
 
+test_expect_success "rauc write-slot invalid local paths" "
+  test_must_fail rauc -c $SHARNESS_TEST_DIRECTORY/test.conf write-slot system0 foo &&
+  test_must_fail rauc -c $SHARNESS_TEST_DIRECTORY/test.conf write-slot system0 foo.raucb &&
+  test_must_fail rauc -c $SHARNESS_TEST_DIRECTORY/test.conf write-slot system0 /path/to/foo.raucb
+"
+
+test_expect_success "rauc write-slot invalid slot" "
+  test_must_fail rauc -c $SHARNESS_TEST_DIRECTORY/test.conf write-slot system0 foo &&
+  test_must_fail rauc -c $SHARNESS_TEST_DIRECTORY/test.conf write-slot system0 foo.img &&
+  test_must_fail rauc -c $SHARNESS_TEST_DIRECTORY/test.conf write-slot system0 /path/to/foo.img
+"
+
 test_done
-- 
2.14.1

